'use client';

import { useState, useRef, Suspense } from 'react';
import { motion, Variants } from 'framer-motion';
import { z } from 'zod';
import { 
  MapPinIcon,
  EnvelopeIcon, 
  PhoneIcon, 
  GlobeAltIcon, 
  ClockIcon, 
  UserIcon,
  TagIcon,
  PaperAirplaneIcon,
  ChatBubbleLeftRightIcon,
  BuildingOfficeIcon,
  CheckCircleIcon,
  XMarkIcon,
  ArrowPathIcon,
  ExclamationCircleIcon,
} from '@heroicons/react/24/outline';
import { FaFacebook, FaTwitter, FaLinkedin, FaInstagram, FaYoutube } from 'react-icons/fa';
import dynamic from 'next/dynamic';
import { useForm, SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';

import HeroSection from '@/components/HeroSection';

// Types
interface ContactInfoItem {
  id: string;
  title: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  href: string;
}

interface FAQItem {
  id: string;
  question: string;
  answer: string;
}

interface BusinessHours {
  day: string;
  hours: string;
}

// Schema for form validation
const contactFormSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),
  email: z.string().email({ message: 'Please enter a valid email address' }),
  subject: z.string().min(1, { message: 'Please select a subject' }),
  message: z.string().min(10, { message: 'Message must be at least 10 characters' }),
  phone: z.string().optional(),
});

type ContactFormData = z.infer<typeof contactFormSchema>;

// Animation variants
const fadeInUp: Variants = {
  hidden: { opacity: 0, y: 20 },
  visible: { 
    opacity: 1, 
    y: 0, 
    transition: { 
      duration: 0.6 
    } 
  }
};

const stagger: Variants = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
};

// Team member interface
interface TeamMember {
  id: string;
  name: string;
  role: string;
  image: string;
  social: {
    twitter?: string;
    linkedin?: string;
    github?: string;
  };
}

// Team data
const teamMembers: TeamMember[] = [
  {
    id: '1',
    name: 'Alex Johnson',
    role: 'CEO & Founder',
    image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80',
    social: {
      twitter: '#',
      linkedin: '#'
    }
  },
  {
    id: '2',
    name: 'Taylor Smith',
    role: 'CTO',
    image: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80',
    social: {
      twitter: '#',
      linkedin: '#',
      github: '#'
    }
  },
  {
    id: '3',
    name: 'Jordan Lee',
    role: 'Customer Success',
    image: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=774&q=80',
    social: {
      twitter: '#',
      linkedin: '#'
    }
  }
];

const faqs: FAQItem[] = [
  {
    id: 'business-hours',
    question: 'What are your business hours?',
    answer: 'Our support team is available Monday to Friday from 9:00 AM to 6:00 PM (NPT). We are closed on public holidays.'
  },
  {
    id: 'support-ticket',
    question: 'How can I track my support ticket?',
    answer: 'Once you submit a support ticket, you\'ll receive a confirmation email with a ticket number. You can use this number to track the status of your request.'
  },
  {
    id: 'customer-support',
    question: 'Do you offer 24/7 customer support?',
    answer: 'Our standard support hours are 9 AM to 6 PM NPT, Monday through Friday. For enterprise customers, we offer 24/7 priority support.'
  },
  {
    id: 'support-request',
    question: 'What information should I include in my support request?',
    answer: 'Please include your account details, a clear description of the issue, any error messages, and steps to reproduce the problem for faster resolution.'
  }
];

const businessHours: BusinessHours[] = [
  { day: 'Monday - Friday', hours: '9:00 AM - 6:00 PM' },
  { day: 'Saturday', hours: '10:00 AM - 4:00 PM' },
  { day: 'Sunday', hours: 'Closed' },
];

const contactInfo: ContactInfoItem[] = [
  {
    id: 'address',
    title: 'Visit Our Office',
    description: '123 Business Ave, Kathmandu 44600, Nepal',
    icon: MapPinIcon,
    href: 'https://maps.google.com'
  },
  {
    id: 'email',
    title: 'Email Us',
    description: 'info@siscora.com',
    icon: EnvelopeIcon,
    href: 'mailto:info@siscora.com'
  },
  {
    id: 'phone',
    title: 'Call Us',
    description: '+977 1 2345678',
    icon: PhoneIcon,
    href: 'tel:+97712345678'
  },
  {
    id: 'website',
    title: 'Visit Us',
    description: 'www.siscora.com',
    icon: GlobeAltIcon,
    href: 'https://siscora.com'
  }
];

const socialLinks = [
  { 
    name: 'Facebook', 
    icon: FaFacebook, 
    href: 'https://facebook.com/siscora',
    color: 'text-blue-600 hover:text-blue-700',
    bgColor: 'bg-blue-100 hover:bg-blue-50'
  },
  { 
    name: 'Twitter', 
    icon: FaTwitter, 
    href: 'https://twitter.com/siscora',
    color: 'text-sky-500 hover:text-sky-600',
    bgColor: 'bg-sky-100 hover:bg-sky-50'
  },
  { 
    name: 'LinkedIn', 
    icon: FaLinkedin, 
    href: 'https://linkedin.com/company/siscora',
    color: 'text-blue-700 hover:text-blue-800',
    bgColor: 'bg-blue-100 hover:bg-blue-50'
  },
  { 
    name: 'Instagram', 
    icon: FaInstagram, 
    href: 'https://instagram.com/siscora',
    color: 'text-pink-600 hover:text-pink-700',
    bgColor: 'bg-pink-100 hover:bg-pink-50'
  },
  { 
    name: 'YouTube', 
    icon: FaYoutube, 
    href: 'https://youtube.com/siscora',
    color: 'text-red-600 hover:text-red-700',
    bgColor: 'bg-red-100 hover:bg-red-50'
  },
];

export default function Contact() {
  const [activeFaq, setActiveFaq] = useState<string | null>(null);
  const [isMapLoaded, setIsMapLoaded] = useState(false);
  const formRef = useRef<HTMLFormElement>(null);
  
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors, isSubmitting, isSubmitSuccessful },
    setError
  } = useForm<ContactFormData>({
    resolver: zodResolver(contactFormSchema),
    defaultValues: {
      name: '',
      email: '',
      subject: '',
      message: '',
      phone: ''
    }
  });

  const toggleFaq = (id: string) => {
    setActiveFaq(activeFaq === id ? null : id);
  };

  const onSubmit: SubmitHandler<ContactFormData> = async (data) => {
    try {
      // In a real app, you would send this data to your API
      console.log('Form submitted:', data);
      
      // Simulate API call with a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Reset form on successful submission
      reset();
      
      // Scroll to success message
      if (formRef.current) {
        formRef.current.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    } catch (error) {
      setError('root', {
        type: 'manual',
        message: 'Something went wrong. Please try again later.'
      });
    }
  };
  
  const handleMapLoad = () => {
    setIsMapLoaded(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">
      {/* Hero Section */}
      <div className="relative">
        <HeroSection
          title="Get in Touch"
          subtitle="We're here to help and answer any questions you might have. Reach out to us and we'll respond as soon as possible."
          imageUrl="https://images.unsplash.com/photo-1522071820081-009f0129c71c?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80"
          imageAlt="Contact us"
          overlayColor="bg-gradient-to-r from-indigo-600 to-purple-600"
          className="relative overflow-hidden"
        >
          <div className="absolute inset-0 bg-gradient-to-r from-indigo-600/90 to-purple-600/90" />
          <div className="absolute inset-0 bg-grid-white/10 [mask-image:linear-gradient(180deg,white,rgba(255,255,255,0))]" />
        </HeroSection>
      </div>

      {/* Main Content Container */}
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24">
        {/* Contact Info & Form Section */}
        <section className="mb-24">
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-center mb-16"
          >
            <h2 className="text-3xl font-bold text-gray-900 sm:text-4xl">
              We'd love to hear from you
            </h2>
            <p className="mt-4 text-lg text-gray-600 max-w-2xl mx-auto">
              Have questions about our services? Reach out to us today and our team will get back to you as soon as possible.
            </p>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            {/* Contact Information */}
            <div className="lg:col-span-1">
              <motion.div
                initial="hidden"
                animate="visible"
                variants={stagger}
                className="bg-white p-8 rounded-2xl shadow-lg border border-gray-100 h-full"
              >
                <motion.h2 variants={fadeInUp} className="text-2xl font-bold text-gray-900 mb-6">
                  Contact Information
                </motion.h2>
                
                <motion.div variants={fadeInUp} className="space-y-6">
                  {contactInfo.map((info, index) => {
                    const Icon = info.icon;
                    return (
                      <motion.div 
                        key={info.id}
                        variants={fadeInUp}
                        whileHover={{ x: 5 }}
                        transition={{ type: 'spring', stiffness: 300 }}
                        className="flex items-start p-3 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                      >
                        <div className="flex-shrink-0 h-10 w-10 rounded-lg bg-indigo-50 flex items-center justify-center text-indigo-600">
                          <Icon className="h-5 w-5" aria-hidden="true" />
                        </div>
                        <div className="ml-4">
                          <h3 className="text-sm font-semibold text-gray-900">{info.title}</h3>
                          <a 
                            href={info.href}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="mt-1 text-sm text-gray-600 hover:text-indigo-600 transition-colors duration-200 block"
                          >
                            {info.description}
                          </a>
                        </div>
                      </motion.div>
                    );
                  })}
                </motion.div>

                <motion.div 
                  variants={fadeInUp}
                  className="pt-6 mt-6 border-t border-gray-200"
                >
                  <h3 className="text-sm font-semibold text-gray-900 mb-4">Business Hours</h3>
                  <dl className="space-y-3">
                    {businessHours.map((hours, index) => (
                      <motion.div 
                        key={hours.day}
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="flex justify-between items-center p-2 rounded-lg hover:bg-gray-50"
                      >
                        <dt className="text-sm text-gray-600">{hours.day}</dt>
                        <dd className="text-sm font-medium text-gray-900 bg-gray-100 px-3 py-1 rounded-full">
                          {hours.hours}
                        </dd>
                      </motion.div>
                    ))}
                  </dl>
                </motion.div>
              </motion.div>
            </div>

            {/* Team & Support Section */}
            <div className="lg:col-span-2 space-y-8">
              {/* Support Hours */}
              <motion.div 
                className="bg-white p-6 rounded-xl shadow-sm border border-gray-100"
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5 }}
              >
                <h3 className="text-lg font-medium text-gray-900 mb-4">Support Hours</h3>
                <div className="space-y-3">
                  {businessHours.map((hours) => (
                    <div key={hours.day} className="flex justify-between">
                      <span className="text-gray-600">{hours.day}</span>
                      <span className="font-medium text-gray-900">{hours.hours}</span>
                    </div>
                  ))}
                </div>
                <div className="mt-6">
                  <h4 className="text-sm font-medium text-gray-900 mb-2">Quick Contact</h4>
                  <div className="flex flex-col space-y-3">
                    <a 
                      href="mailto:support@siscora.com" 
                      className="inline-flex items-center text-indigo-600 hover:text-indigo-800"
                    >
                      <EnvelopeIcon className="h-5 w-5 mr-2" />
                      support@siscora.com
                    </a>
                    <a 
                      href="tel:+97712345678" 
                      className="inline-flex items-center text-indigo-600 hover:text-indigo-800"
                    >
                      <PhoneIcon className="h-5 w-5 mr-2" />
                      +977 1 234 5678
                    </a>
                  </div>
                </div>
              </motion.div>

              {/* Team Preview */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.1 }}
              >
                <h3 className="text-lg font-medium text-gray-900 mb-4">Our Team</h3>
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
                  {teamMembers.map((member) => (
                    <div key={member.id} className="bg-white p-4 rounded-lg shadow-sm border border-gray-100 text-center">
                      <div className="mx-auto h-24 w-24 rounded-full overflow-hidden mb-3">
                        <img
                          className="h-full w-full object-cover"
                          src={member.image}
                          alt={member.name}
                        />
                      </div>
                      <h4 className="font-medium text-gray-900">{member.name}</h4>
                      <p className="text-sm text-gray-600 mb-3">{member.role}</p>
                      <div className="flex justify-center space-x-3">
                        {member.social.linkedin && (
                          <a href={member.social.linkedin} className="text-gray-400 hover:text-indigo-600">
                            <span className="sr-only">LinkedIn</span>
                            <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
                            </svg>
                          </a>
                        )}
                        {member.social.twitter && (
                          <a href={member.social.twitter} className="text-gray-400 hover:text-indigo-600">
                            <span className="sr-only">Twitter</span>
                            <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                              <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
                            </svg>
                          </a>
                        )}
                        {member.social.github && (
                          <a href={member.social.github} className="text-gray-400 hover:text-indigo-600">
                            <span className="sr-only">GitHub</span>
                            <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                              <path fillRule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.029-2.683-.103-.253-.446-1.27.098-2.647 0 0 .84-.268 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.294 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.699 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.919.678 1.852 0 1.336-.012 2.415-.012 2.743 0 .267.18.578.688.48A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clipRule="evenodd" />
                            </svg>
                          </a>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              {/* Top FAQs Preview */}
              <motion.div
                className="mt-8"
                initial={{ opacity: 0, y: 20 }}
                whileInView={{ opacity: 1, y: 0 }}
                viewport={{ once: true }}
                transition={{ duration: 0.5, delay: 0.2 }}
              >
                <h3 className="text-lg font-medium text-gray-900 mb-4">Common Questions</h3>
                <div className="space-y-3">
                  {faqs.slice(0, 3).map((faq) => (
                    <div key={faq.id} className="bg-white p-4 rounded-lg shadow-sm border border-gray-100">
                      <h4 className="font-medium text-gray-900">{faq.question}</h4>
                      <p className="mt-1 text-sm text-gray-600 line-clamp-2">{faq.answer}</p>
                      <button 
                        onClick={() => {
                          const element = document.getElementById('faq-section');
                          if (element) {
                            element.scrollIntoView({ behavior: 'smooth' });
                            toggleFaq(faq.id);
                          }
                        }}
                        className="mt-2 text-sm font-medium text-indigo-600 hover:text-indigo-500"
                      >
                        Read more →
                      </button>
                    </div>
                  ))}
                </div>
              </motion.div>
            </div>
          </div>
        </div>
      </div>

      {/* Contact Form Section */}
      <div className="bg-gray-50 py-16" id="contact-form">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <span className="inline-block bg-indigo-100 text-indigo-800 text-xs font-semibold px-3 py-1 rounded-full uppercase tracking-wider">
              Contact Us
            </span>
            <h2 className="mt-2 text-3xl font-extrabold text-gray-900 sm:text-4xl">
              Send us a message
            </h2>
            <p className="mt-4 text-xl text-gray-600 max-w-3xl mx-auto">
              Have questions or feedback? We'd love to hear from you.
            </p>
          </motion.div>

          <div className="mt-12 max-w-3xl mx-auto">
            <form onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-1 gap-y-6">
              <div className="grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-8">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Name <span className="text-red-500">*</span>
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <UserIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                    </div>
                    <input
                      type="text"
                      id="name"
                      className={`block w-full pl-10 pr-3 py-3 border ${
                        errors.name ? 'border-red-300' : 'border-gray-300'
                      } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500`}
                      placeholder="John Doe"
                      {...register('name')}
                    />
                  </div>
                  {errors.name && (
                    <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
                  )}
                </div>

                <div>
                  <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                    Email <span className="text-red-500">*</span>
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <EnvelopeIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                    </div>
                    <input
                      type="email"
                      id="email"
                      className={`block w-full pl-10 pr-3 py-3 border ${
                        errors.email ? 'border-red-300' : 'border-gray-300'
                      } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500`}
                      placeholder="you@example.com"
                      {...register('email')}
                    />
                  </div>
                  {errors.email && (
                    <p className="mt-1 text-sm text-red-600">{errors.email.message}</p>
                  )}
                </div>
              </div>

              <div>
                <label htmlFor="subject" className="block text-sm font-medium text-gray-700">
                  Subject <span className="text-red-500">*</span>
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <TagIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                  </div>
                  <select
                    id="subject"
                    className={`block w-full pl-10 pr-3 py-3 border ${
                      errors.subject ? 'border-red-300' : 'border-gray-300'
                    } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500`}
                    defaultValue=""
                    {...register('subject')}
                  >
                    <option value="" disabled>Select a subject</option>
                    <option value="general">General Inquiry</option>
                    <option value="support">Technical Support</option>
                    <option value="billing">Billing Question</option>
                    <option value="feedback">Feedback</option>
                    <option value="other">Other</option>
                  </select>
                </div>
                {errors.subject && (
                  <p className="mt-1 text-sm text-red-600">{errors.subject.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="message" className="block text-sm font-medium text-gray-700">
                  Message <span className="text-red-500">*</span>
                </label>
                <div className="mt-1">
                  <textarea
                    id="message"
                    rows={4}
                    className={`block w-full px-3 py-3 border ${
                      errors.message ? 'border-red-300' : 'border-gray-300'
                    } rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500`}
                    placeholder="How can we help you?"
                    defaultValue={''}
                    {...register('message')}
                  />
                </div>
                {errors.message && (
                  <p className="mt-1 text-sm text-red-600">{errors.message.message}</p>
                )}
              </div>

              <div>
                <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                  Phone Number (Optional)
                </label>
                <div className="mt-1 relative rounded-md shadow-sm">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <PhoneIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                  </div>
                  <input
                    type="tel"
                    id="phone"
                    className="block w-full pl-10 pr-3 py-3 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                    placeholder="+1 (555) 123-4567"
                    {...register('phone')}
                  />
                </div>
              </div>

              <div className="pt-2">
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`w-full flex justify-center py-3 px-6 border border-transparent rounded-md shadow-sm text-base font-medium text-white ${
                    isSubmitting ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'
                  } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200`}
                >
                  {isSubmitting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Sending...
                    </>
                  ) : (
                    <>
                      <PaperAirplaneIcon className="-ml-1 mr-2 h-5 w-5" />
                      Send Message
                    </>
                  )}
                </button>
              </div>

              {isSubmitSuccessful && (
                <div className="rounded-md bg-green-50 p-4 mt-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-green-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-green-800">
                        Thank you for your message! We'll get back to you soon.
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {errors.root && (
                <div className="rounded-md bg-red-50 p-4 mt-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm font-medium text-red-800">
                        {errors.root.message}
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </form>
          </div>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="bg-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5 }}
          >
            <span className="inline-block bg-indigo-100 text-indigo-800 text-xs font-semibold px-3 py-1 rounded-full uppercase tracking-wider">
              FAQ
            </span>
            <h2 className="mt-2 text-3xl font-extrabold text-gray-900 sm:text-4xl">
              Frequently Asked Questions
            </h2>
            <p className="mt-4 text-xl text-gray-600 max-w-3xl mx-auto">
              Can't find what you're looking for? Check out our FAQs or contact our support team.
            </p>
          </motion.div>

          <motion.div 
            className="mt-16 max-w-3xl mx-auto"
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            <div className="space-y-4">
              {faqs.map((faq) => (
                <motion.div 
                  key={faq.id}
                  className="bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100 hover:shadow-md transition-shadow duration-200"
                  whileHover={{ y: -2 }}
                  initial={{ opacity: 0, y: 10 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.3 }}
                >
                  <motion.button
                    onClick={() => toggleFaq(faq.id)}
                    className="w-full px-6 py-5 text-left focus:outline-none"
                    aria-expanded={activeFaq === faq.id}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-medium text-gray-900">
                        {faq.question}
                      </h3>
                      <motion.span 
                        className="ml-4 flex-shrink-0 h-6 w-6 flex items-center justify-center rounded-full bg-indigo-100 text-indigo-600"
                        animate={{
                          rotate: activeFaq === faq.id ? 180 : 0,
                          backgroundColor: activeFaq === faq.id ? '#4f46e5' : '#e0e7ff',
                          color: activeFaq === faq.id ? 'white' : '#4f46e5'
                        }}
                        transition={{ duration: 0.2 }}
                      >
                        <svg 
                          className="h-4 w-4" 
                          fill="none" 
                          viewBox="0 0 24 24" 
                          stroke="currentColor"
                        >
                          <path 
                            strokeLinecap="round" 
                            strokeLinejoin="round" 
                            strokeWidth={2} 
                            d="M19 9l-7 7-7-7" 
                          />
                        </svg>
                      </motion.span>
                    </div>
                  </motion.button>
                  
                  <AnimatePresence>
                    {activeFaq === faq.id && (
                      <motion.div
                        initial="collapsed"
                        animate="open"
                        exit="collapsed"
                        variants={{
                          open: { 
                            opacity: 1, 
                            height: 'auto',
                            marginTop: '0.5rem',
                            marginBottom: '1.25rem'
                          },
                          collapsed: { 
                            opacity: 0, 
                            height: 0,
                            marginTop: 0,
                            marginBottom: 0
                          }
                        }}
                        transition={{ duration: 0.3, ease: 'easeInOut' }}
                        className="px-6 overflow-hidden"
                      >
                        <div className="text-gray-600 pb-2">
                          {faq.answer}
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>
              ))}
            </div>

            <motion.div 
              className="mt-12 text-center"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              viewport={{ once: true }}
              transition={{ duration: 0.5, delay: 0.2 }}
            >
              <p className="text-gray-600 mb-6">
                Still have questions? We're here to help!
              </p>
              <a
                href="#contact-form"
                className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200"
              >
                <ChatBubbleLeftRightIcon className="-ml-1 mr-2 h-5 w-5" />
                Contact Support
              </a>
            </motion.div>
          </motion.div>
        </div>
      </div>

      {/* Social Media Section */}
      <section className="relative bg-gradient-to-r from-indigo-50 to-purple-50 py-20 overflow-hidden">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6 }}
            className="text-center max-w-3xl mx-auto"
          >
            <span className="inline-block px-4 py-1.5 text-sm font-semibold text-indigo-700 bg-indigo-100 rounded-full mb-5">
              Follow Us
            </span>
            <h2 className="text-3xl font-bold text-gray-900 sm:text-4xl">
              Join Our Community
            </h2>
            <p className="mt-4 text-lg text-gray-600">
              Stay updated with our latest news, announcements, and special offers.
            </p>
            <div className="mt-10 flex flex-wrap justify-center gap-5">
              {socialLinks.map((item, index) => {
                const Icon = item.icon;
                return (
                  <motion.a
                    key={item.name}
                    href={item.href}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="group relative p-3.5 bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300"
                    whileHover={{ y: -4 }}
                    initial={{ opacity: 0, y: 15 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ 
                      delay: index * 0.1, 
                      type: 'spring', 
                      stiffness: 300,
                      damping: 10
                    }}
                  >
                    <span className="absolute inset-0 rounded-xl bg-gradient-to-r from-indigo-500 to-purple-600 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                    <span className="relative flex items-center justify-center h-10 w-10">
                      <Icon className="h-5 w-5 text-gray-700 group-hover:text-white transition-all duration-300" />
                    </span>
                    <span className="sr-only">{item.name}</span>
                  </motion.a>
                );
              })}
            </div>
          </motion.div>
        </div>
        
        {/* Decorative elements */}
        <div className="absolute -top-24 -left-24 w-96 h-96 bg-purple-100 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob" />
        <div className="absolute -top-12 -right-12 w-96 h-96 bg-indigo-100 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob animation-delay-2000" />
        <div className="absolute -bottom-24 left-1/2 -translate-x-1/2 w-96 h-96 bg-pink-100 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob animation-delay-4000" />
      </section>
    </div>
  );
}
